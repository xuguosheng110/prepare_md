
5.1 使用“zero-copy”

功能背景

通信是机器人开发引擎的基础功能，原生ROS进行大数据量通信时存在时延较大、系统负载较高等问题。TogetheROS.Bot基于地平线系统软件库hbmem实现了“zero-copy”功能，数据跨进程传输零拷贝，可大大减少大块数据传输延时和系统资源占用。本节介绍如何使用tros.b hbmem接口创建publisher和subscriber node进行大块数据传输，并计算传输延时。

前置条件

已按照安装成功安装tros.b，并已掌握ROS2 node，topic，qos等基础知识，以及如何创建package和使用自定义消息，具体教程可见ROS2官方文档。

已安装ROS2软件包构建系统ament_cmake。安装命令：apt update; apt-get install python3-catkin-pkg; pip3 install empy

已安装ROS2编译工具colcon。安装命令：pip3 install -U colcon-common-extensions

任务内容

1. 创建package

打开一个新的终端，source tros.b setup脚本，确保ros2命令可以运行。

shell
source /opt/tros/setup.bash


使用以下命令创建一个workspace，详细介绍可见ROS2 官方教程Creating a workspace。

shell
mkdir -p ~/dev_ws/src
cd ~/dev_ws/src


运行以下命令创建一个package

shell
ros2 pkg create --build-type ament_cmake hbmem_pubsub


2. 创建自定义消息

2.1 新建消息文件

运行以下命令，创建msg目录用来存放自定义消息文件

shell
cd ~/dev_ws/src/hbmem_pubsub
mkdir msg


在msg目录下新建SampleMessage.msg文件，具体内容如下:

idl
int32 index
uint64 time_stamp
uint8[4194304] data

uint32 MAX_SIZE=4194304


2.2 编译依赖

返回到~/dev_ws/src/hbmem_pubsub目录，修改package.xml，在&lt;buildtool_depend&gt;ament_cmake&lt;/buildtool_depend&gt;下面添加以下内容：

xml
  &lt;build_depend&gt;rosidl_default_generators&lt;/build_depend&gt;
  &lt;exec_depend&gt;rosidl_default_runtime&lt;/exec_depend&gt;
  &lt;member_of_group&gt;rosidl_interface_packages&lt;/member_of_group&gt;


2.3 编译脚本

修改CMakeLists.txt，在# find_package(&lt;dependency&gt; REQUIRED)下面添加以下内容，进行msg编译:

cmake
find_package(rosidl_default_generators REQUIRED)
rosidl_generate_interfaces(${PROJECT_NAME}
  "msg/SampleMessage.msg"
)


3. 创建消息发布节点

3.1 新建消息发布节点文件

在~/dev_ws/src/hbmem_pubsub/src目录下新建publisher_hbmem.cpp文件，用来创建publisher node，具体代码和解释如下：

c++

include 

include 

include 

include 

include "rclcpp/rclcpp.hpp"

include "hbmempubsub/msg/samplemessage.hpp"

using namespace std::chrono_literals;

class MinimalHbmemPublisher  : public rclcpp::Node {
 public:
  MinimalHbmemPublisher () : Node("minimalhbmempublisher"), count(0) {
    // 创建publisherhbmem，topic为"topic"，QOS为KEEPLAST(10)，以及默认的可靠传输
    publisher_ = this->createpublisherhbmem(
        "topic", 10);

// 定时器，每隔40毫秒调用一次timer_callback进行消息发送
timer_ = this-&gt;create_wall_timer(
    40ms, std::bind(&amp;MinimalHbmemPublisher ::timer_callback, this));


}

private:
  // 定时器回调函数
  void timercallback() {
    // 获取要发送的消息
    auto loanedMsg = publisher->borrowloanedmessage();
    // 判断消息是否可用，可能出现获取消息失败导致消息不可用的情况
    if (loanedMsg.is_valid()) {
      // 引用方式获取实际的消息
      auto&amp; msg = loanedMsg.get();

  // 获取当前时间，单位为us
  auto time_now =
      std::chrono::duration_cast&lt;std::chrono::microseconds&gt;(
          std::chrono::steady_clock::now().time_since_epoch()).count();

  // 对消息的index和time_stamp进行赋值
  msg.index = count_;
  msg.time_stamp = time_now;

  // 打印发送消息
  RCLCPP_INFO(this-&gt;get_logger(), "message: %d", msg.index);
  publisher_-&gt;publish(std::move(loanedMsg));
  // 注意，发送后，loanedMsg已不可用
  // 计数器加一
  count_++;
} else {
  // 获取消息失败，丢弃该消息
  RCLCPP_INFO(this-&gt;get_logger(), "Failed to get LoanMessage!");
}


}

// 定时器
  rclcpp::TimerBase::SharedPtr timer_;

// hbmem publisher
  rclcpp::PublisherHbmem::SharedPtr publisher_;

// 计数器
  sizet count;
};

int main(int argc, char * argv[])
{
  rclcpp::init(argc, argv);
  rclcpp::spin(std::make_shared());
  rclcpp::shutdown();
  return 0;
}



3.2 编译依赖

返回到~/dev_ws/src/hbmem_pubsub目录，修改package.xml，在&lt;member_of_group&gt;rosidl_interface_packages&lt;/member_of_group&gt;  下面增加rclcpp依赖：

xml
  &lt;depend&gt;rclcpp&lt;/depend&gt;


3.3 编译脚本

修改CMakeLists.txt，在rosidl_generate_interfaces语句下面添加以下内容，完成publisher编译：

cmake
find_package(rclcpp REQUIRED)

addexecutable(talker src/publisherhbmem.cpp)
amenttargetdependencies(talker rclcpp)
rosidltargetinterfaces(talker
  ${PROJECTNAME} "rosidltypesupport_cpp")

install(TARGETS
  talker
  DESTINATION lib/${PROJECT_NAME})


4. 创建消息接收节点

4.1 新建消息接收节点文件

在~/dev_ws/src/hbmem_pubsub/src目录下新建subscriber_hbmem.cpp文件，用来创建subscriber node，具体代码和解释如下：

c++

include 

include "rclcpp/rclcpp.hpp"

include "hbmempubsub/msg/samplemessage.hpp"

class MinimalHbmemSubscriber  : public rclcpp::Node {
 public:
  MinimalHbmemSubscriber () : Node("minimalhbmemsubscriber") {
    // 创建subscriptionhbmem，topic为"sample"，QOS为KEEPLAST(10)，以及默认的可靠传输
    // 消息回调函数为topiccallback
    subscription_ =
        this->createsubscriptionhbmem(
            "topic", 10,
            std::bind(&amp;MinimalHbmemSubscriber ::topiccallback, this,
                      std::placeholders::1));
  }

private:
  // 消息回调函数
  void topiccallback(
      const hbmempubsub::msg::SampleMessage::SharedPtr msg) const {
    // 注意，msg只能在回调函数中使用，回调函数返回后，该消息就会被释放
    // 获取当前时间
    auto timenow =
        std::chrono::durationcast(
            std::chrono::steadyclock::now().timesinceepoch())
            .count();
    // 计算延时并打印出来
    RCLCPPINFO(this->getlogger(), "msg %d, time cost %dus", msg->index,
                timenow - msg->time_stamp);
  }

// hbmem subscription
  rclcpp::SubscriptionHbmem::SharedPtr
      subscription_;
};

int main(int argc, char * argv[])
{
  rclcpp::init(argc, argv);
  rclcpp::spin(std::make_shared());
  rclcpp::shutdown();
  return 0;
}



4.2 编译脚本

返回到~/dev_ws/src/hbmem_pubsub目录，之前已经在package.xml中增加rclcpp依赖，故不需要需改package.xml。

修改CMakeLists.txt，在install语句下面添加以下内容，完成subscriber编译：

cmake
addexecutable(listener src/subscriberhbmem.cpp)
amenttargetdependencies(listener rclcpp)
rosidltargetinterfaces(listener
  ${PROJECTNAME} "rosidltypesupport_cpp")

install(TARGETS
  listener
  DESTINATION lib/${PROJECT_NAME})


5. 编译和运行

整个workspace目录结构如下：

shell
dev_ws/
└── src
    └── hbmem_pubsub
        ├── CMakeLists.txt
        ├── include
        │   └── hbmem_pubsub
        ├── msg
        │   └── SampleMessage.msg
        ├── package.xml
        └── src
            ├── publisher_hbmem.cpp
            └── subscriber_hbmem.cpp


完整的package.xml内容如下：

xml



  hbmem_pubsub
  0.0.0
  TODO: Package description
  root
  TODO: License declaration

ament_cmake

rosidldefaultgenerators
  rosidldefaultruntime
  rosidlinterfacepackages

rclcpp

amentlintauto
  amentlintcommon


    ament_cmake
  




完整的CMakeLists.txt内容如下：

cmake
cmakeminimumrequired(VERSION 3.5)
project(hbmem_pubsub)

Default to C99

if(NOT CMAKECSTANDARD)
  set(CMAKECSTANDARD 99)
endif()

Default to C++14

if(NOT CMAKECXXSTANDARD)
  set(CMAKECXXSTANDARD 14)
endif()

if(CMAKECOMPILERISGNUCXX OR CMAKECXXCOMPILERID MATCHES "Clang")
  addcompileoptions(-Wall -Wextra -Wpedantic)
endif()

find dependencies

findpackage(amentcmake REQUIRED)

uncomment the following section in order to fill in

further dependencies manually.

find_package( REQUIRED)

findpackage(rosidldefault_generators REQUIRED)

rosidlgenerateinterfaces(${PROJECT_NAME}
  "msg/SampleMessage.msg"
)

find_package(rclcpp REQUIRED)

addexecutable(talker src/publisherhbmem.cpp)
amenttargetdependencies(talker rclcpp)
rosidltargetinterfaces(talker
  ${PROJECTNAME} "rosidltypesupport_cpp")

install(TARGETS
  talker
  DESTINATION lib/${PROJECT_NAME})

addexecutable(listener src/subscriberhbmem.cpp)
amenttargetdependencies(listener rclcpp)
rosidltargetinterfaces(listener
  ${PROJECTNAME} "rosidltypesupport_cpp")

install(TARGETS
  listener
  DESTINATION lib/${PROJECT_NAME})

if(BUILDTESTING)
  findpackage(amentlintauto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # uncomment the line when a copyright and license is not present in all source files
  #set(amentcmakecopyrightFOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # uncomment the line when this package is not in a git repo
  #set(amentcmakecpplintFOUND TRUE)
  amentlintautofindtest_dependencies()
endif()

ament_package()



在workspace根目录~/dev_ws，编译package:

shell
colcon build --packages-select hbmem_pubsub


若提示colcon命令未安装，使用以下命令安装即可：

shell
pip3 install -U colcon-common-extensions


打开一个新的终端，cd到dev_ws目录，source tros.b和当前workspace setup文件：

shell
source /opt/tros/setup.bash
cd ~/dev_ws
. install/setup.bash


运行talker node:

bash
ros2 run hbmem_pubsub talker


终端上会出现如下打印：

text


再打开一个新的终端，同样cd到dev_ws目录，然后souce setup文件，之后运行listener node:

bash
source /opt/tros/setup.bash
cd ~/dev_ws
. install/setup.bash

ros2 run hbmem_pubsub listener


终端上会有如下打印，表明subscriber已成功接收到publisher发送的消息：

text


使用Ctrl+C可结束每个Node的运行。

本节总结

如果你已经掌握ROS2的publisher和subscriber使用方式，那么很容易切换到hbmem的publisher和subscriber，使用时只需要做以下改动：


rclcpp::Publisher 改为 rclcpp::PublisherHbmem
createpublisher 改为 createpublisher_hbmem
rclcpp::Subscription 改为 rclcpp::SubscriptionHbmem
createsubscription 改为 createsubscription_hbmem
publisher发送消息前要先调用borrowloanedmessage获取消息，然后确认消息是否可用，若可用，再进行赋值，发送
subscription在回调函数中处理接收到的消息，且接收到的消息只能在回调函数中使用，回调函数执行完，该消息就会释放


注意：


使用基于hbmem的零拷贝会占用ion内存，若创建多个较大消息的publisher，可能出现ion内存不够用，导致创建失败问题。
创建publisher时会一次性申请KEEPLAST的三倍个消息大小的ion内存（最大为256MB），用于消息的传输，之后不会再动态申请。若subscriber端消息处理出错或者未及时处理，则会出现消息buffer都被占用，publisher一直获取不到可用消息的情况。


使用限制

和ROS2的publisher/subscriber数据传输方式相比，使用基于hbmem的零拷贝传输存在以下限制：


QOS History只支持KEEPLAST，不支持KEEPALL，且KEEPLAST不能设置太大，有内存限制，目前设置为最大占用256M内存
传输的消息大小是固定的，即消息的sizeof值是不变的，不能包含可变长度类型数据，例如：string，动态数组
只能用于同一设备进程间通信，不可跨设备传输
publisher消息要先获取再赋值发送，且要判断是否获取成功
subscriber收到的消息有效期仅限回调函数中，不能在回调函数之外使用