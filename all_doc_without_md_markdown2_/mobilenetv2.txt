
mobilenetv2

功能介绍

mobilenetv2图片分类算法示例使用图片作为输入，利用BPU进行算法推理，发布包含物体类别的算法msg。

mobilenetv2是使用ImageNet data数据集训练出来的caffe模型，模型来源：https://github.com/shicai/MobileNet-Caffe。
支持的目标类型包括人、动物、水果、交通工具等共1000种类型。具体支持的类别详见地平线RDK板端文件/opt/tros/lib/dnnnodeexample/config/imagenet.list（已安装TogatherROS.Bot）。

代码仓库：https://github.com/HorizonRDK/hobot_dnn

应用场景：mobilenetv2能够预测给定图片的类别，可实现数字识别、物体识别等功能，主要应用于文字识别、图像检索等领域。

食品类型识别案例：https://github.com/frotms/Chinese-and-Western-Food-Classification

支持平台

| 平台    | 运行方式      | 示例功能                       |
| ------- | ------------ | ------------------------------ |
| RDK X3, RDK X3 Module, RDK Ultra| Ubuntu 20.04 | · 启动MIPI/USB摄像头，并通过web展示推理渲染结果· 使用本地回灌，渲染结果保存在本地 |
| X86     | Ubuntu 20.04 | · 使用本地回灌，渲染结果保存在本地 |

准备工作

地平线RDK平台


地平线RDK已烧录好地平线提供的Ubuntu 20.04系统镜像。
地平线RDK已成功安装tros.b。
地平线RDK已安装MIPI或者USB摄像头，无摄像头的情况下通过回灌本地JPEG/PNG格式图片或者MP4、H.264和H.265的视频方式体验算法效果。
确认PC机能够通过网络访问地平线RDK。


X86平台


X86环境已配置好Ubuntu 20.04系统镜像。
X86环境系统已成功安装tros.b。


使用介绍

地平线RDK平台

mobilenetv2图片分类订阅sensor package发布的图片，经过推理后发布算法msg，通过websocket package实现在PC端浏览器上渲染显示发布的图片和对应的算法结果。

使用MIPI摄像头发布图片

shell

配置TogetheROS环境

source /opt/tros/setup.bash

配置MIPI摄像头

export CAM_TYPE=mipi

启动launch文件

ros2 launch dnnnodeexample dnnnodeexample.launch.py dnnexampleconfigfile:=config/mobilenetv2workconfig.json dnnexampleimagewidth:=480 dnnexampleimage_height:=272


使用USB摄像头发布图片

shell

配置TogetheROS环境

source /opt/tros/setup.bash

配置USB摄像头

export CAM_TYPE=usb

启动launch文件

ros2 launch dnnnodeexample dnnnodeexample.launch.py dnnexampleconfigfile:=config/mobilenetv2workconfig.json dnnexampleimagewidth:=480 dnnexampleimage_height:=272


使用本地图片回灌

mobilenetv2图片分类算法示例使用本地JPEG/PNG格式图片回灌，经过推理后将算法结果渲染后的图片存储在本地的运行路径下。

shell

配置TogetheROS环境

source /opt/tros/setup.bash

启动launch文件

ros2 launch dnnnodeexample dnnnodeexamplefeedback.launch.py dnnexampleconfigfile:=config/mobilenetv2workconfig.json dnnexampleimage:=config/target_class.jpg


X86平台

使用本地图片回灌

mobilenetv2图片分类算法示例使用本地JPEG/PNG格式图片回灌，经过推理后将算法结果渲染后的图片存储在本地的运行路径下。

shell

配置TogetheROS环境

source /opt/tros/setup.bash

启动launch文件

ros2 launch dnnnodeexample dnnnodeexamplefeedback.launch.py dnnexampleconfigfile:=config/mobilenetv2workconfig.json dnnexampleimage:=config/target_class.jpg


结果分析

使用摄像头发布图片

在运行终端输出如下信息：

shell


输出log显示，发布算法推理结果的topic为hobot_dnn_detection，订阅图片的topic为/hbmem_img，订阅到的图片和算法推理输出帧率约为30fps。

在PC端的浏览器输入http://IP:8000 即可查看图像和算法渲染效果（IP为地平线RDK的IP地址）：



使用本地图片回灌

在运行终端输出如下信息：

shell


输出log显示，算法使用输入的图片config/targetclass.jpg推理出的图片分类结果是window-shade，置信度为0.776356（算法只输出置信度最高的分类结果）。存储的渲染图片文件名为renderfeedback00.jpeg，渲染图片效果：