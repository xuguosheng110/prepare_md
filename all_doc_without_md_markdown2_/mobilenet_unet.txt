
mobilenet_unet

功能介绍

mobilenet_unet分割算法示例使用图片作为输入，利用BPU进行算法推理，发布包含分割结果msg。

mobilenet_unet是使用Cityscapes数据集训练出来的Onnx模型，模型来源：https://github.com/HorizonRobotics-Platform/ModelZoo/tree/master/MobilenetUnet。支持对人、车辆、路面、路标等类别进行分割。

代码仓库：https://github.com/HorizonRDK/hobot_dnn

应用场景：mobilenet_unet由MobileNet与UNet组成，能够从像素级别分割图像内容，可实现道路识别、遥感地图分析、医学影像诊断等功能，主要应用于自动驾驶、地质检测，医疗影像分析等领域。

背景虚化案例：https://github.com/rusito-23/mobile_unet_segmentation

支持平台

| 平台    | 运行方式      | 示例功能                       |
| ------- | ------------ | ------------------------------ |
| RDK X3, RDK X3 Module| Ubuntu 20.04 | · 启动MIPI/USB摄像头/本地回灌，渲染结果保存在本地 |
| X86     | Ubuntu 20.04 | · 使用本地回灌，渲染结果保存在本地 |

准备工作

地平线RDK平台


地平线RDK已烧录好地平线提供的Ubuntu 20.04系统镜像。
地平线RDK已成功安装TogetheROS.Bot。
地平线RDK已安装MIPI或者USB摄像头，无摄像头的情况下通过回灌本地JPEG/PNG格式图片的方式体验算法效果。


X86平台


X86环境已配置好Ubuntu 20.04系统镜像。
X86环境系统已成功安装tros.b。


使用介绍

地平线RDK平台

使用摄像头发布图片

使用MIPI摄像头发布图片

mobilenetunet分割示例订阅sensor package发布的图片，经过推理后发布算法msg，并在运行路径下自动保存渲染后的图片，命名方式为renderframeid时间戳秒时间戳纳秒.jpg。

shell

配置tros.b环境

source /opt/tros/setup.bash

配置MIPI摄像头

export CAM_TYPE=mipi

启动launch文件

ros2 launch dnnnodeexample dnnnodeexample.launch.py dnnexampledumprenderimg:=1 dnnexampleconfigfile:=config/mobilenetunetworkconfig.json dnnexampleimagewidth:=1920 dnnexampleimage_height:=1080


使用USB摄像头发布图片

shell

配置tros.b环境

source /opt/tros/setup.bash

配置USB摄像头

export CAM_TYPE=usb

启动launch文件

ros2 launch dnnnodeexample dnnnodeexample.launch.py dnnexampledumprenderimg:=1 dnnexampleconfigfile:=config/mobilenetunetworkconfig.json dnnexampleimagewidth:=1920 dnnexampleimage_height:=1080


使用本地图片回灌

mobilenet_unet分割示例使用本地JPEG/PNG格式图片回灌，经过推理后将算法结果渲染后的图片存储在本地的运行路径下。

shell

配置tros.b环境

source /opt/tros/setup.bash

启动launch文件

ros2 launch dnnnodeexample dnnnodeexamplefeedback.launch.py dnnexampleconfigfile:=config/mobilenetunetworkconfig.json dnnexampleimage:=config/raw_unet.jpeg


X86平台

使用本地图片回灌

mobilenet_unet分割示例使用本地JPEG/PNG格式图片回灌，经过推理后将算法结果渲染后的图片存储在本地的运行路径下。

shell

配置tros.b环境

source /opt/tros/setup.bash

启动launch文件

ros2 launch dnnnodeexample dnnnodeexamplefeedback.launch.py dnnexampleconfigfile:=config/mobilenetunetworkconfig.json dnnexampleimage:=config/raw_unet.jpeg


结果分析

使用摄像头发布图片

在运行终端输出如下信息：

shell


输出log显示，发布算法推理结果的topic为hobot_dnn_detection，订阅图片的topic为/hbmem_img，其中图片发布的帧率根据会根据算法推理输出帧率自适应。此外，地平线RDK上会渲染语义分割结果并存储图片在运行路径下，会使帧率下降。

原始图片：


渲染后的图片：


使用本地图片回灌

在运行终端输出如下信息：

shell


输出log显示，算法使用输入的图片config/rawunet.jpeg推理，存储的渲染图片文件名为renderunetfeedback0_0.jpeg，渲染图片效果：